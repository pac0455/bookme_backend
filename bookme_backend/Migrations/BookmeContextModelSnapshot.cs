// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookme_backend.DataAcces.Models;

#nullable disable

namespace bookme_backend.Migrations
{
    [DbContext(typeof(BookmeContext))]
    partial class BookmeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<int?>("DuracionMinutos")
                        .HasColumnType("int")
                        .HasColumnName("duracion_minutos");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("imagen_url");

                    b.Property<int>("NegocioId")
                        .HasColumnType("int")
                        .HasColumnName("negocio_id");

                    b.Property<string>("Nombre")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("precio");

                    b.HasKey("Id");

                    b.HasIndex("NegocioId");

                    b.ToTable("servicios", (string)null);
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("categoria");

                    b.HasKey("Id");

                    b.ToTable("categoria", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Clínica"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Tienda"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Gimnasio"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Salón de Belleza"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Veterinaria"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Restaurante"
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Cafetería"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Barbería"
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Psicología"
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Nutrición"
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "Fisioterapia"
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "Podología"
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "Asesoría"
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "Consultoría"
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "Servicios Jurídicos"
                        },
                        new
                        {
                            Id = 16,
                            Nombre = "Clases Particulares"
                        },
                        new
                        {
                            Id = 17,
                            Nombre = "Academia de Idiomas"
                        },
                        new
                        {
                            Id = 18,
                            Nombre = "Tatuajes y Piercings"
                        },
                        new
                        {
                            Id = 19,
                            Nombre = "Centro Estético"
                        },
                        new
                        {
                            Id = 20,
                            Nombre = "Terapias Alternativas"
                        },
                        new
                        {
                            Id = 21,
                            Nombre = "Cuidado de Mascotas"
                        },
                        new
                        {
                            Id = 22,
                            Nombre = "Mecánica"
                        },
                        new
                        {
                            Id = 23,
                            Nombre = "Electricista"
                        },
                        new
                        {
                            Id = 24,
                            Nombre = "Fontanero"
                        },
                        new
                        {
                            Id = 25,
                            Nombre = "Fotografía"
                        });
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Horario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("dia_semana");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time")
                        .HasColumnName("hora_fin");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time")
                        .HasColumnName("hora_inicio");

                    b.Property<int>("IdNegocio")
                        .HasColumnType("int")
                        .HasColumnName("id_negocio");

                    b.HasKey("Id");

                    b.HasIndex("IdNegocio");

                    b.ToTable("horarios", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "horarioAtencion");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Negocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoria");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("direccion");

                    b.Property<double>("Latitud")
                        .HasColumnType("float")
                        .HasColumnName("latitud");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("logo");

                    b.Property<double>("Longitud")
                        .HasColumnType("float")
                        .HasColumnName("longitud");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("negocios", (string)null);
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime")
                        .HasColumnName("actualizado");

                    b.Property<DateTime?>("Creado")
                        .HasColumnType("datetime")
                        .HasColumnName("creado");

                    b.Property<string>("EstadoPago")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("estado_pago");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_pago");

                    b.Property<string>("IdTransaccionExterna")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("id_transaccion_externa");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("metodo_pago");

                    b.Property<string>("Moneda")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("moneda");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("monto");

                    b.Property<bool?>("Reembolsado")
                        .HasColumnType("bit")
                        .HasColumnName("reembolsado");

                    b.Property<int>("ReservaId")
                        .HasColumnType("int")
                        .HasColumnName("reserva_id");

                    b.Property<string>("RespuestaPasarela")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("respuesta_pasarela");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId");

                    b.ToTable("pagos", (string)null);
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComentarioCliente")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentario_cliente");

                    b.Property<string>("Estado")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion");

                    b.Property<TimeOnly?>("HoraFin")
                        .HasColumnType("time")
                        .HasColumnName("hora_fin");

                    b.Property<TimeOnly?>("HoraInicio")
                        .HasColumnType("time")
                        .HasColumnName("hora_inicio");

                    b.Property<int>("NegocioId")
                        .HasColumnType("int")
                        .HasColumnName("negocio_id");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("NegocioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("reservas", (string)null);
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.ReservasServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ReservaId")
                        .HasColumnType("int")
                        .HasColumnName("reserva_id");

                    b.Property<int>("ServicioId")
                        .HasColumnType("int")
                        .HasColumnName("servicio_id");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId");

                    b.HasIndex("ServicioId");

                    b.ToTable("reservas_servicios", (string)null);
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaSuscripcion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_suscripcion");

                    b.Property<int>("IdNegocio")
                        .HasColumnType("int")
                        .HasColumnName("id_negocio");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_usuario");

                    b.Property<string>("RolNegocio")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("rol_negocio");

                    b.HasKey("Id");

                    b.HasIndex("IdNegocio");

                    b.HasIndex("IdUsuario");

                    b.ToTable("suscripciones", (string)null);
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirebaseUid")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("firebase_uid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__usuarios__AB6E6164E28DE90C")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "FirebaseUid" }, "UQ__usuarios__AB6E6164E28DE90S")
                        .IsUnique()
                        .HasFilter("[firebase_uid] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Valoracion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentario");

                    b.Property<DateTime?>("FechaValoracion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_valoracion");

                    b.Property<int?>("Puntuacion")
                        .HasColumnType("int")
                        .HasColumnName("puntuacion");

                    b.Property<int>("ReservaId")
                        .HasColumnType("int")
                        .HasColumnName("reserva_id");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("valoraciones", (string)null);
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.ValoracionNegocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentario");

                    b.Property<DateTime>("FechaValoracion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_valoracion");

                    b.Property<int>("NegocioId")
                        .HasColumnType("int")
                        .HasColumnName("negocio_id");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("int")
                        .HasColumnName("puntuacion");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("NegocioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("valoraciones_negocio", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookme_backend.DataAcces.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Servicio", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Negocio", "Negocio")
                        .WithMany("Servicios")
                        .HasForeignKey("NegocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Negocio");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Horario", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Negocio", "Negocio")
                        .WithMany("HorariosAtencion")
                        .HasForeignKey("IdNegocio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Negocio");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Negocio", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Categoria", "Categoria")
                        .WithMany("Negocios")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Pago", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Reserva", "Reserva")
                        .WithMany("Pagos")
                        .HasForeignKey("ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Reserva", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Negocio", "Negocio")
                        .WithMany("Reservas")
                        .HasForeignKey("NegocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookme_backend.DataAcces.Models.Usuario", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Negocio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.ReservasServicio", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Reserva", "Reserva")
                        .WithMany("ReservasServicios")
                        .HasForeignKey("ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Servicio", "Servicio")
                        .WithMany("ReservasServicios")
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reserva");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Suscripcion", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Negocio", "IdNegocioNavigation")
                        .WithMany("Suscripciones")
                        .HasForeignKey("IdNegocio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookme_backend.DataAcces.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Suscripciones")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdNegocioNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Valoracion", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Reserva", "Reserva")
                        .WithMany("Valoraciones")
                        .HasForeignKey("ReservaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("bookme_backend.DataAcces.Models.Usuario", "Usuario")
                        .WithMany("Valoraciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reserva");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.ValoracionNegocio", b =>
                {
                    b.HasOne("bookme_backend.DataAcces.Models.Negocio", "Negocio")
                        .WithMany("ResenasNegocio")
                        .HasForeignKey("NegocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookme_backend.DataAcces.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Negocio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Servicio", b =>
                {
                    b.Navigation("ReservasServicios");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Categoria", b =>
                {
                    b.Navigation("Negocios");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Negocio", b =>
                {
                    b.Navigation("HorariosAtencion");

                    b.Navigation("ResenasNegocio");

                    b.Navigation("Reservas");

                    b.Navigation("Servicios");

                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Reserva", b =>
                {
                    b.Navigation("Pagos");

                    b.Navigation("ReservasServicios");

                    b.Navigation("Valoraciones");
                });

            modelBuilder.Entity("bookme_backend.DataAcces.Models.Usuario", b =>
                {
                    b.Navigation("Reservas");

                    b.Navigation("Suscripciones");

                    b.Navigation("Valoraciones");
                });
#pragma warning restore 612, 618
        }
    }
}
